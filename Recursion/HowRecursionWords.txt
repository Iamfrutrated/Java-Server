Take the example shown below:
(assuming the program runs)

int factorialNum = 9;
int runNum = 9;

public void factorial()
{
    if(runNum == 1)
        return;

    factorialNum *= (factorialNum - 1);
    runNum --;
    factorial();
}

Now this example is pretty straightforward. First, you enter the method with runNum being 9. 9 is clearly not 1, so we move on.
Now we do the factorial operation. We use factorialNum *= (factorialNum - 1), which in this case is 9 * 8. Then we decrement runNum, 
go into the next iteration, rinse and repeat. Nothing interesting here.

----------------------------------------------------------------------------------------------------------------------------------------
Now take this example:
(assuming the program runs)

public static void main(String[] args)
{
		int nineFactorial = factorial(9, 9);
		System.out.println(nineFactorial);
}

public int factorial(int runNum, int factorialNum)
{  
		  if(runNum == 1)
			  return factorialNum;
		
		  return factorial(runNum - 1, factorialNum * (runNum - 1));
}

This gets exponentially more interesting. We see that runNum and factorialNum start off at 9, 9 respectively. We go through the same 
process as before. runNum is 9, therefore it is not 1, so we move on. Now we see line 36. We see that we evaluate an expression that 
loops back on itself. Now this keeps cycling and cycling until runNum is 1, which we can easily trace to. However, we still haven't 
figured out what that "return" does. Now this really bothers me, I mean, what are we returning anways?........ Or does it? If we examine
what happens when runNum = 1, we find that we just return out of the method. Well, that makes it simple.
----------------------------------------------------------------------------------------------------------------------------------------
Now take this example:
(assuming the program runs)

public static void main(String[] args)
{
	int nineFactorial = factorial(9);
	System.out.println(nineFactorial);
}

public int factorial(int factorialDegree)
{
	if(factorialDegree == 1)
		return 1;
	else
		return factorialDegree * factorial(factorialDegree - 1);
}

In a real program, I would recommend this method. Not only is this method easily to follow, it's also very easy to read and understand.
Running it through, we see that factorialDegree starts at 9. 9 is not 1, so we go to the else part. We return 9 * factorial(8). Now you 
loop through the one with 8, and the 7, 6, 5, ... until you reach 1. You then return 1 back out to the previous, which was 2. Now you get 2 * 1, which returns to 3, and you get 3 * 2, .... until you reach 9 factorial. 
----------------------------------------------------------------------------------------------------------------------------------------





